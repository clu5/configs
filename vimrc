" =============================================================================
" Vim Configuration File
" Author: Generated by Claude Code
" Description: Professional Vim setup with Python development tools
" =============================================================================

" =============================================================================
" BASIC SETTINGS
" =============================================================================

" Allow cursor movement beyond line endings in visual block mode
set virtualedit=all

" Disable vi compatibility mode for modern Vim features
set nocompatible

" =============================================================================
" MINIMAL VIM SETTINGS (from vim-min)
" =============================================================================

" Enable digraph for special characters with CTRL-K
set digraph

" Enable movement with arrow keys
set esckeys

" Allow hiding of unsaved, modified buffers
set hidden

" Show current cursor position
set ruler

" Show input of incomplete command
set showcmd

" Show possible completions of commands
set wildmenu

" Turn off error bells
set noerrorbells

" Prevent cursor from changing column when jumping
set nostartofline

" Allow backspace character to move cursor properly
set backspace=indent,eol,start

" Format options for text formatting
set formatoptions=cqrt

" Show status line even when only one window is shown
set laststatus=2

" Shortens messages to avoid scrolling
set shortmess=at

" Which wrap - allow cursor wrapping at line borders
set whichwrap=<,>,h,l

" Comments settings for reformatting
set comments=b:#,:%,n:>

" Show end-of-line and tab characters
set list
set listchars=tab:»·,trail:·

" Viminfo settings for command history
set viminfo=%,'50,\"100,:100,n~/.viminfo

" Display line numbers for easier navigation
set number

" Use visual bell instead of audible beep on errors
set visualbell

" Set UTF-8 encoding for proper character support
set encoding=utf-8

" =============================================================================
" WHITESPACE AND INDENTATION
" =============================================================================

" Enable line wrapping and break at word boundaries
set wrap
set linebreak

" Tab settings: 4 spaces per tab, expand tabs to spaces
set tabstop=4       " Width of tab character
set shiftwidth=4    " Width of auto-indent
set softtabstop=4   " Width when hitting Tab key
set smarttab        " Smart tab behavior
set expandtab       " Convert tabs to spaces

" Intelligent indentation
set autoindent      " Copy indent from current line
set smartindent     " Smart autoindenting for new lines
set showmatch       " Highlight matching brackets

" =============================================================================
" CURSOR AND NAVIGATION
" =============================================================================

" Allow backspace over everything in insert mode
set backspace=indent,eol,start

" Add angle brackets to matchpairs for % jumping
set matchpairs+=<:>

" Make j and k move by visual lines (useful for wrapped text)
nnoremap j gj
nnoremap k gk

" =============================================================================
" SEARCH SETTINGS
" =============================================================================

" Case-insensitive searching
set ignorecase

" Enable incremental search (search as you type)
set incsearch

" Highlight search results
set hlsearch

" Clear search highlighting with Ctrl+L
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR>

" =============================================================================
" VISUAL SETTINGS
" =============================================================================

" Faster terminal rendering
set ttyfast

" Toggle invisible characters (tabs, line endings) with leader+l
map <leader>l :set list!<CR>

" =============================================================================
" PERSISTENT UNDO
" =============================================================================

" Enable persistent undo across Vim sessions
set undodir=~/.vim/undodir
set undofile

" =============================================================================
" CODE FOLDING
" =============================================================================

" Use indentation-based folding
set foldmethod=indent
set foldnestmax=3   " Maximum fold nesting level
set nofoldenable    " Start with folds open
set foldlevel=20    " Keep folds open by default

" =============================================================================
" FILE MANAGEMENT
" =============================================================================

" Automatically remove trailing whitespace on save
autocmd BufWrite * :%s/\s\+$//e

" =============================================================================
" THEME AND APPEARANCE
" =============================================================================

" Enable 256 colors and true color support for better themes in tmux
if &term =~ '256color'
    set t_Co=256
endif

" Enable true color support if available
if has('termguicolors')
    set termguicolors
endif

" Fix color issues in tmux
if exists('$TMUX')
    set t_Co=256
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Enable syntax highlighting
syntax enable

" Configure Gruvbox color scheme with fallback
try
    colorscheme gruvbox
    set background=dark
    let g:gruvbox_contrast_dark = 'hard'      " High contrast dark mode
    let g:gruvbox_contrast_light = 'soft'     " Low contrast light mode
    let g:gruvbox_improved_strings = 1        " Better string highlighting
    let g:gruvbox_improved_warnings = 1       " Better warning colors
    let g:gruvbox_invert_selection = 1        " Invert selection colors
    let g:gruvbox_invert_signs = 1           " Invert sign column
    let g:gruvbox_invert_tabline = 1         " Invert tab line
catch
    " Fallback to default colors if gruvbox isn't available
    set background=dark
    colorscheme default
endtry

" =============================================================================
" FILE NAVIGATOR (NERDTree)
" =============================================================================

" NERDTree key mappings
nnoremap <leader>n :NERDTreeFocus<CR>     " Focus NERDTree
nnoremap <C-n> :NERDTree<CR>              " Open NERDTree
nnoremap <C-t> :NERDTreeToggle<CR>        " Toggle NERDTree
nnoremap <C-f> :NERDTreeFind<CR>          " Find current file in NERDTree

" Auto-close Vim if NERDTree is the only window left
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Mirror NERDTree in all tabs
autocmd BufWinEnter * silent NERDTreeMirror

" Auto-switch to file when leaving NERDTree
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 | let buf=bufnr() | buffer# | execute \"normal! \<C-W>w\" | execute 'buffer'.buf | endif

" =============================================================================
" LINTING AND FORMATTING (ALE)
" =============================================================================

" Configure ALE fixers for Python files
let b:ale_fixers = ['black', 'isort']

" Automatically fix files on save
let b:ale_fix_on_save = 1

" Configure Black formatter with 120 character line length
let g:ale_python_black_options = '--line-length 120'

" Configure flake8 linter with 120 character line length
let g:ale_python_flake8_options = '--max-line-length=120'

" Enable ALE completion where available
let g:ale_completion_enabled = 1

" Show error details in the status line
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
