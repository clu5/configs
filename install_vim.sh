#!/bin/bash

# Vim Configuration Installer
# This script installs Vim plugins and Python development tools for code formatting and linting
# Author: Generated by Claude Code
# Usage: ./install_vim.sh

set -euo pipefail  # Exit on error, undefined variables, and pipe failures

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions for colored output
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Vim is installed
log_info "Checking for Vim installation..."
if ! command -v vim >/dev/null 2>&1; then
    log_error "Vim is not installed. Please install Vim before running this script."
    log_info "On Ubuntu/Debian: sudo apt install vim"
    log_info "On macOS: brew install vim"
    exit 1
fi
log_info "Vim found: $(vim --version | head -n1)"

# Create Vim undo directory for persistent undo functionality
log_info "Setting up Vim undo directory..."
if [ ! -d ~/.vim/undodir ]; then
    mkdir -p ~/.vim/undodir
    log_info "Created ~/.vim/undodir for persistent undo"
else
    log_info "Undo directory already exists"
fi

# Setup Vim package manager directory structure
log_info "Setting up Vim package manager..."
if [ ! -d ~/.vim/pack/plugins/start ]; then
    log_info "Creating Vim package directories..."
    mkdir -p ~/.vim/pack/plugins/start
    log_info "Vim package manager structure created"
else
    log_info "Vim package directories already exist"
fi

# Install Vim plugins
log_info "Installing Vim plugins..."
cd ~/.vim/pack/plugins/start

# Function to install or update a plugin
install_plugin() {
    local plugin_name=$1
    local repo_url=$2
    
    if [ -d "$plugin_name" ]; then
        log_warn "$plugin_name already exists, updating..."
        cd "$plugin_name"
        git pull origin master || git pull origin main
        cd ..
    else
        log_info "Installing $plugin_name..."
        if git clone "$repo_url" "$plugin_name"; then
            log_info "Successfully installed $plugin_name"
        else
            log_error "Failed to install $plugin_name"
            return 1
        fi
    fi
}

# Install plugins with error handling
install_plugin "ale" "https://github.com/dense-analysis/ale" || log_error "Failed to install ALE"
install_plugin "nerdtree" "https://github.com/preservim/nerdtree" || log_error "Failed to install NERDTree"
install_plugin "gruvbox" "https://github.com/morhetz/gruvbox" || log_error "Failed to install Gruvbox"
install_plugin "vim-flake8" "https://github.com/nvie/vim-flake8" || log_error "Failed to install vim-flake8"

# Check if Python 3 is installed
log_info "Checking for Python 3 installation..."
if ! command -v python3 >/dev/null 2>&1; then
    log_error "Python 3 is not installed. Please install Python 3 before running this script."
    log_info "On Ubuntu/Debian: sudo apt install python3 python3-pip"
    log_info "On macOS: brew install python3"
    exit 1
fi
log_info "Python 3 found: $(python3 --version)"

# Check if pip3 is available
if ! command -v pip3 >/dev/null 2>&1; then
    log_error "pip3 is not installed. Please install pip3."
    exit 1
fi

# Install Python packages for code formatting and linting
log_info "Installing Python development packages..."
if pip3 install --user black isort flake8; then
    log_info "Successfully installed Python packages: black, isort, flake8"
else
    log_error "Failed to install some Python packages"
    exit 1
fi

# Install glow markdown viewer
log_info "Installing glow markdown viewer..."
if command -v snap >/dev/null 2>&1; then
    sudo snap install glow
    log_info "Successfully installed glow via snap"
elif command -v brew >/dev/null 2>&1; then
    brew install glow
    log_info "Successfully installed glow via brew"
else
    log_warn "Could not install glow automatically. Please install manually:"
    log_info "Visit: https://github.com/charmbracelet/glow"
fi

# Install glow configuration
GLOW_CONFIG_SOURCE="$SCRIPT_DIR/glow.yml"
if [ -f "$GLOW_CONFIG_SOURCE" ]; then
    GLOW_CONFIG_DIR=~/.config/glow
    mkdir -p "$GLOW_CONFIG_DIR"
    if [ -f "$GLOW_CONFIG_DIR/glow.yml" ]; then
        BACKUP_FILE="$GLOW_CONFIG_DIR/glow.yml.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$GLOW_CONFIG_DIR/glow.yml" "$BACKUP_FILE"
        log_info "Backed up existing glow config to $BACKUP_FILE"
    fi
    cp "$GLOW_CONFIG_SOURCE" "$GLOW_CONFIG_DIR/glow.yml"
    log_info "Installed glow configuration for tmux compatibility"
else
    log_warn "glow.yml not found in script directory"
fi

# Install vimrc configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VIMRC_SOURCE="$SCRIPT_DIR/vimrc"

if [ ! -f "$VIMRC_SOURCE" ]; then
    log_error "vimrc not found in $SCRIPT_DIR"
    exit 1
fi

# Backup existing vimrc if it exists
if [ -f ~/.vimrc ]; then
    BACKUP_FILE=~/.vimrc.backup.$(date +%Y%m%d_%H%M%S)
    log_warn "Existing ~/.vimrc found, backing up to $BACKUP_FILE"
    cp ~/.vimrc "$BACKUP_FILE"
fi

# Install new vimrc
log_info "Installing vimrc configuration..."
cp "$VIMRC_SOURCE" ~/.vimrc
log_info "Vim configuration installed to ~/.vimrc"

log_info "Installation completed successfully!"
log_info "Restart Vim to load the new configuration and plugins."
log_info "Note: First time loading may take a moment as Vim generates help tags."
log_info "Glow markdown viewer installed for viewing README files"
